// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_common.proto
package com.czhj.sdk.common.models;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.util.Map;

public final class HeaderBidding extends AndroidMessage<HeaderBidding, HeaderBidding.Builder> {
    public static final ProtoAdapter<HeaderBidding> ADAPTER = new ProtoAdapter_HeaderBidding();

    public static final Parcelable.Creator<HeaderBidding> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_BID_TOKEN = "";

    public static final Integer DEFAULT_CHANNEL_ID = 0;

    public static final String DEFAULT_P_ID = "";

    public static final String DEFAULT_CUR = "";

    /**
     * 竞价获取广告标识
     */
    @WireField(tag = 1, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String bid_token;

    /**
     * 聚合渠道id
     */
    @WireField(tag = 2, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer channel_id;

    /**
     * 外部渠道媒体属性
     */
    @WireField(tag = 3, keyAdapter = "com.squareup.wire.ProtoAdapter#STRING", adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final Map<String, String> options;

    /**
     * 竞价广告位
     */
    @WireField(tag = 4, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String p_id;

    /**
     * 请求价格币种 CNY, USD
     */
    @WireField(tag = 5, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String cur;

    public HeaderBidding(String bid_token, Integer channel_id, Map<String, String> options, String p_id, String cur) {
        this(bid_token, channel_id, options, p_id, cur, ByteString.EMPTY);
    }

    public HeaderBidding(String bid_token, Integer channel_id, Map<String, String> options, String p_id, String cur, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.bid_token = bid_token;
        this.channel_id = channel_id;
        this.options = Internal.immutableCopyOf("options", options);
        this.p_id = p_id;
        this.cur = cur;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.bid_token = bid_token;
        builder.channel_id = channel_id;
        builder.options = Internal.copyOf("options", options);
        builder.p_id = p_id;
        builder.cur = cur;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof HeaderBidding)) return false;
        HeaderBidding o = (HeaderBidding) other;
        return unknownFields().equals(o.unknownFields()) && Internal.equals(bid_token, o.bid_token) && Internal.equals(channel_id, o.channel_id) && options.equals(o.options) && Internal.equals(p_id, o.p_id) && Internal.equals(cur, o.cur);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (bid_token != null ? bid_token.hashCode() : 0);
            result = result * 37 + (channel_id != null ? channel_id.hashCode() : 0);
            result = result * 37 + options.hashCode();
            result = result * 37 + (p_id != null ? p_id.hashCode() : 0);
            result = result * 37 + (cur != null ? cur.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (bid_token != null) builder.append(", bid_token=").append(bid_token);
        if (channel_id != null) builder.append(", channel_id=").append(channel_id);
        if (!options.isEmpty()) builder.append(", options=").append(options);
        if (p_id != null) builder.append(", p_id=").append(p_id);
        if (cur != null) builder.append(", cur=").append(cur);
        return builder.replace(0, 2, "HeaderBidding{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<HeaderBidding, Builder> {
        public String bid_token = DEFAULT_BID_TOKEN;

        public Integer channel_id = DEFAULT_CHANNEL_ID;

        public Map<String, String> options;

        public String p_id = DEFAULT_P_ID;

        public String cur = DEFAULT_CUR;

        public Builder() {
            options = Internal.newMutableMap();
        }

        /**
         * 竞价获取广告标识
         */
        public Builder bid_token(String bid_token) {
            this.bid_token = bid_token;
            return this;
        }

        /**
         * 聚合渠道id
         */
        public Builder channel_id(Integer channel_id) {
            this.channel_id = channel_id;
            return this;
        }

        /**
         * 外部渠道媒体属性
         */
        public Builder options(Map<String, String> options) {
            Internal.checkElementsNotNull(options);
            this.options = options;
            return this;
        }

        /**
         * 竞价广告位
         */
        public Builder p_id(String p_id) {
            this.p_id = p_id;
            return this;
        }

        /**
         * 请求价格币种 CNY, USD
         */
        public Builder cur(String cur) {
            this.cur = cur;
            return this;
        }

        @Override
        public HeaderBidding build() {
            return new HeaderBidding(bid_token, channel_id, options, p_id, cur, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_HeaderBidding extends ProtoAdapter<HeaderBidding> {
        private final ProtoAdapter<Map<String, String>> options = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING);

        public ProtoAdapter_HeaderBidding() {
            super(FieldEncoding.LENGTH_DELIMITED, HeaderBidding.class);
        }

        @Override
        public int encodedSize(HeaderBidding value) {
            return ProtoAdapter.STRING.encodedSizeWithTag(1, value.bid_token) + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.channel_id) + options.encodedSizeWithTag(3, value.options) + ProtoAdapter.STRING.encodedSizeWithTag(4, value.p_id) + ProtoAdapter.STRING.encodedSizeWithTag(5, value.cur) + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, HeaderBidding value) throws IOException {
            ProtoAdapter.STRING.encodeWithTag(writer, 1, value.bid_token);
            ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.channel_id);
            options.encodeWithTag(writer, 3, value.options);
            ProtoAdapter.STRING.encodeWithTag(writer, 4, value.p_id);
            ProtoAdapter.STRING.encodeWithTag(writer, 5, value.cur);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public HeaderBidding decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.bid_token(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 2:
                        builder.channel_id(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 3:
                        builder.options.putAll(options.decode(reader));
                        break;
                    case 4:
                        builder.p_id(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 5:
                        builder.cur(ProtoAdapter.STRING.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public HeaderBidding redact(HeaderBidding value) {
            Builder builder = value.newBuilder();
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
