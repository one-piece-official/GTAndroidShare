// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_common.proto
package com.czhj.sdk.common.models;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;

public final class Geo extends AndroidMessage<Geo, Geo.Builder> {
    public static final ProtoAdapter<Geo> ADAPTER = new ProtoAdapter_Geo();

    public static final Parcelable.Creator<Geo> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final Float DEFAULT_LAT = 0.0f;

    public static final Float DEFAULT_LON = 0.0f;

    public static final String DEFAULT_LANGUAGE = "";

    public static final String DEFAULT_TIMEZONE = "";

    public static final Long DEFAULT_CITY_CODE = 0L;

    public static final String DEFAULT_COUNTRY = "";

    public static final String DEFAULT_REGION_CODE = "";

    public static final String DEFAULT_SECONDSFROMGMT = "";

    public static final Double DEFAULT_ACCURACY = 0.0d;

    /**
     * 纬度
     */
    @WireField(
            tag = 1,
            adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
    )
    public final Float lat;

    /**
     * 经度
     */
    @WireField(
            tag = 2,
            adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
    )
    public final Float lon;

    /**
     * 语言（大写）
     */
    @WireField(
            tag = 3,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String language;

    /**
     * 时区
     */
    @WireField(
            tag = 4,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String timeZone;

    /**
     * 地域编码
     */
    @WireField(
            tag = 5,
            adapter = "com.squareup.wire.ProtoAdapter#UINT64"
    )
    public final Long city_code;

    /**
     * 国家
     */
    @WireField(
            tag = 6,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String country;

    /**
     * ip库中识别出来的编码，可能是市级编码、省级编码
     */
    @WireField(
            tag = 7,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String region_code;

    /**
     * 当前时区距离隔离的秒数
     */
    @WireField(
            tag = 8,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String secondsFromGMT;

    /**
     * 经纬度半径，单位：米
     */
    @WireField(
            tag = 9,
            adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
    )
    public final Double accuracy;

    public Geo(Float lat, Float lon, String language, String timeZone, Long city_code, String country,
               String region_code, String secondsFromGMT, Double accuracy) {
        this(lat, lon, language, timeZone, city_code, country, region_code, secondsFromGMT, accuracy, ByteString.EMPTY);
    }

    public Geo(Float lat, Float lon, String language, String timeZone, Long city_code, String country,
               String region_code, String secondsFromGMT, Double accuracy, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.lat = lat;
        this.lon = lon;
        this.language = language;
        this.timeZone = timeZone;
        this.city_code = city_code;
        this.country = country;
        this.region_code = region_code;
        this.secondsFromGMT = secondsFromGMT;
        this.accuracy = accuracy;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.lat = lat;
        builder.lon = lon;
        builder.language = language;
        builder.timeZone = timeZone;
        builder.city_code = city_code;
        builder.country = country;
        builder.region_code = region_code;
        builder.secondsFromGMT = secondsFromGMT;
        builder.accuracy = accuracy;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof Geo)) return false;
        Geo o = (Geo) other;
        return unknownFields().equals(o.unknownFields())
                && Internal.equals(lat, o.lat)
                && Internal.equals(lon, o.lon)
                && Internal.equals(language, o.language)
                && Internal.equals(timeZone, o.timeZone)
                && Internal.equals(city_code, o.city_code)
                && Internal.equals(country, o.country)
                && Internal.equals(region_code, o.region_code)
                && Internal.equals(secondsFromGMT, o.secondsFromGMT)
                && Internal.equals(accuracy, o.accuracy);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (lat != null ? lat.hashCode() : 0);
            result = result * 37 + (lon != null ? lon.hashCode() : 0);
            result = result * 37 + (language != null ? language.hashCode() : 0);
            result = result * 37 + (timeZone != null ? timeZone.hashCode() : 0);
            result = result * 37 + (city_code != null ? city_code.hashCode() : 0);
            result = result * 37 + (country != null ? country.hashCode() : 0);
            result = result * 37 + (region_code != null ? region_code.hashCode() : 0);
            result = result * 37 + (secondsFromGMT != null ? secondsFromGMT.hashCode() : 0);
            result = result * 37 + (accuracy != null ? accuracy.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (lat != null) builder.append(", lat=").append(lat);
        if (lon != null) builder.append(", lon=").append(lon);
        if (language != null) builder.append(", language=").append(language);
        if (timeZone != null) builder.append(", timeZone=").append(timeZone);
        if (city_code != null) builder.append(", city_code=").append(city_code);
        if (country != null) builder.append(", country=").append(country);
        if (region_code != null) builder.append(", region_code=").append(region_code);
        if (secondsFromGMT != null) builder.append(", secondsFromGMT=").append(secondsFromGMT);
        if (accuracy != null) builder.append(", accuracy=").append(accuracy);
        return builder.replace(0, 2, "Geo{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Geo, Builder> {
        public Float lat = DEFAULT_LAT;

        public Float lon = DEFAULT_LON;

        public String language = DEFAULT_LANGUAGE;

        public String timeZone = DEFAULT_TIMEZONE;

        public Long city_code = DEFAULT_CITY_CODE;

        public String country = DEFAULT_COUNTRY;

        public String region_code = DEFAULT_REGION_CODE;

        public String secondsFromGMT = DEFAULT_SECONDSFROMGMT;

        public Double accuracy = DEFAULT_ACCURACY;

        public Builder() {
        }

        /**
         * 纬度
         */
        public Builder lat(Float lat) {
            this.lat = lat;
            return this;
        }

        /**
         * 经度
         */
        public Builder lon(Float lon) {
            this.lon = lon;
            return this;
        }

        /**
         * 语言（大写）
         */
        public Builder language(String language) {
            this.language = language;
            return this;
        }

        /**
         * 时区
         */
        public Builder timeZone(String timeZone) {
            this.timeZone = timeZone;
            return this;
        }

        /**
         * 地域编码
         */
        public Builder city_code(Long city_code) {
            this.city_code = city_code;
            return this;
        }

        /**
         * 国家
         */
        public Builder country(String country) {
            this.country = country;
            return this;
        }

        /**
         * ip库中识别出来的编码，可能是市级编码、省级编码
         */
        public Builder region_code(String region_code) {
            this.region_code = region_code;
            return this;
        }

        /**
         * 当前时区距离隔离的秒数
         */
        public Builder secondsFromGMT(String secondsFromGMT) {
            this.secondsFromGMT = secondsFromGMT;
            return this;
        }

        /**
         * 经纬度半径，单位：米
         */
        public Builder accuracy(Double accuracy) {
            this.accuracy = accuracy;
            return this;
        }

        @Override
        public Geo build() {
            return new Geo(lat, lon, language, timeZone, city_code, country, region_code, secondsFromGMT, accuracy, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_Geo extends ProtoAdapter<Geo> {
        public ProtoAdapter_Geo() {
            super(FieldEncoding.LENGTH_DELIMITED, Geo.class);
        }

        @Override
        public int encodedSize(Geo value) {
            return ProtoAdapter.FLOAT.encodedSizeWithTag(1, value.lat)
                    + ProtoAdapter.FLOAT.encodedSizeWithTag(2, value.lon)
                    + ProtoAdapter.STRING.encodedSizeWithTag(3, value.language)
                    + ProtoAdapter.STRING.encodedSizeWithTag(4, value.timeZone)
                    + ProtoAdapter.UINT64.encodedSizeWithTag(5, value.city_code)
                    + ProtoAdapter.STRING.encodedSizeWithTag(6, value.country)
                    + ProtoAdapter.STRING.encodedSizeWithTag(7, value.region_code)
                    + ProtoAdapter.STRING.encodedSizeWithTag(8, value.secondsFromGMT)
                    + ProtoAdapter.DOUBLE.encodedSizeWithTag(9, value.accuracy)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, Geo value) throws IOException {
            ProtoAdapter.FLOAT.encodeWithTag(writer, 1, value.lat);
            ProtoAdapter.FLOAT.encodeWithTag(writer, 2, value.lon);
            ProtoAdapter.STRING.encodeWithTag(writer, 3, value.language);
            ProtoAdapter.STRING.encodeWithTag(writer, 4, value.timeZone);
            ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.city_code);
            ProtoAdapter.STRING.encodeWithTag(writer, 6, value.country);
            ProtoAdapter.STRING.encodeWithTag(writer, 7, value.region_code);
            ProtoAdapter.STRING.encodeWithTag(writer, 8, value.secondsFromGMT);
            ProtoAdapter.DOUBLE.encodeWithTag(writer, 9, value.accuracy);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public Geo decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.lat(ProtoAdapter.FLOAT.decode(reader));
                        break;
                    case 2:
                        builder.lon(ProtoAdapter.FLOAT.decode(reader));
                        break;
                    case 3:
                        builder.language(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 4:
                        builder.timeZone(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 5:
                        builder.city_code(ProtoAdapter.UINT64.decode(reader));
                        break;
                    case 6:
                        builder.country(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 7:
                        builder.region_code(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 8:
                        builder.secondsFromGMT(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 9:
                        builder.accuracy(ProtoAdapter.DOUBLE.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public Geo redact(Geo value) {
            Builder builder = value.newBuilder();
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
