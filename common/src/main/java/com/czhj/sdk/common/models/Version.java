// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_common.proto
package com.czhj.sdk.common.models;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;

public final class Version extends AndroidMessage<Version, Version.Builder> {
    public static final ProtoAdapter<Version> ADAPTER = new ProtoAdapter_Version();

    public static final Parcelable.Creator<Version> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final Integer DEFAULT_MAJOR = 0;

    public static final Integer DEFAULT_MINOR = 0;

    public static final Integer DEFAULT_MICRO = 0;

    public static final String DEFAULT_VERSION_STR = "";

    /**
     * 主版本号, 必填！
     */
    @WireField(
            tag = 1,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer major;

    /**
     * 副版本号, 必填！
     */
    @WireField(
            tag = 2,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer minor;

    /**
     * 子版本号, 必填！
     */
    @WireField(
            tag = 3,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer micro;

    /**
     * 字符串表示的版本号,在客户端无法解析出三段式数字版本号信息时，用此字段表示
     */
    @WireField(
            tag = 4,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String version_str;

    public Version(Integer major, Integer minor, Integer micro, String version_str) {
        this(major, minor, micro, version_str, ByteString.EMPTY);
    }

    public Version(Integer major, Integer minor, Integer micro, String version_str,
                   ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.major = major;
        this.minor = minor;
        this.micro = micro;
        this.version_str = version_str;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.major = major;
        builder.minor = minor;
        builder.micro = micro;
        builder.version_str = version_str;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof Version)) return false;
        Version o = (Version) other;
        return unknownFields().equals(o.unknownFields())
                && Internal.equals(major, o.major)
                && Internal.equals(minor, o.minor)
                && Internal.equals(micro, o.micro)
                && Internal.equals(version_str, o.version_str);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (major != null ? major.hashCode() : 0);
            result = result * 37 + (minor != null ? minor.hashCode() : 0);
            result = result * 37 + (micro != null ? micro.hashCode() : 0);
            result = result * 37 + (version_str != null ? version_str.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (major != null) builder.append(", major=").append(major);
        if (minor != null) builder.append(", minor=").append(minor);
        if (micro != null) builder.append(", micro=").append(micro);
        if (version_str != null) builder.append(", version_str=").append(version_str);
        return builder.replace(0, 2, "Version{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Version, Builder> {
        public Integer major = DEFAULT_MAJOR;

        public Integer minor = DEFAULT_MINOR;

        public Integer micro = DEFAULT_MICRO;

        public String version_str = DEFAULT_VERSION_STR;

        public Builder() {
        }

        /**
         * 主版本号, 必填！
         */
        public Builder major(Integer major) {
            this.major = major;
            return this;
        }

        /**
         * 副版本号, 必填！
         */
        public Builder minor(Integer minor) {
            this.minor = minor;
            return this;
        }

        /**
         * 子版本号, 必填！
         */
        public Builder micro(Integer micro) {
            this.micro = micro;
            return this;
        }

        /**
         * 字符串表示的版本号,在客户端无法解析出三段式数字版本号信息时，用此字段表示
         */
        public Builder version_str(String version_str) {
            this.version_str = version_str;
            return this;
        }

        @Override
        public Version build() {
            return new Version(major, minor, micro, version_str, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_Version extends ProtoAdapter<Version> {
        public ProtoAdapter_Version() {
            super(FieldEncoding.LENGTH_DELIMITED, Version.class);
        }

        @Override
        public int encodedSize(Version value) {
            return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.major)
                    + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.minor)
                    + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.micro)
                    + ProtoAdapter.STRING.encodedSizeWithTag(4, value.version_str)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, Version value) throws IOException {
            ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.major);
            ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.minor);
            ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.micro);
            ProtoAdapter.STRING.encodeWithTag(writer, 4, value.version_str);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public Version decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.major(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 2:
                        builder.minor(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 3:
                        builder.micro(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 4:
                        builder.version_str(ProtoAdapter.STRING.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public Version redact(Version value) {
            Builder builder = value.newBuilder();
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
