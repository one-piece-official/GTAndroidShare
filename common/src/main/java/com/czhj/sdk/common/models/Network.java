// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_common.proto
package com.czhj.sdk.common.models;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.util.Map;


/**
 * 网络环境信息
 */
public final class Network extends AndroidMessage<Network, Network.Builder> {

    public static final ProtoAdapter<Network> ADAPTER = new ProtoAdapter_Network();

    public static final Parcelable.Creator<Network> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_IPV4 = "";

    public static final Integer DEFAULT_CONNECTION_TYPE = 0;

    public static final Integer DEFAULT_OPERATOR_TYPE = 0;

    public static final String DEFAULT_UA = "";

    public static final String DEFAULT_OPERATOR = "";

    public static final String DEFAULT_MAC = "";

    public static final String DEFAULT_WIFI_MAC = "";

    public static final String DEFAULT_WIFI_ID = "";

    public static final String DEFAULT_CARRIER_NAME = "";

    /**
     * 必填！用户设备的公网IPv4地址，格式要求：255.255.255.255
     */
    @WireField(
            tag = 1,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String ipv4;

    /**
     * 必填！网络连接类型，用于判断网速。0=无法探测当前网络状态; 1=蜂窝数据接入，未知网络类型; 2=2G; 3=3G; 4=4G; 5=5G; 100=Wi-Fi网络接入; 101=以太网接入
     */
    @WireField(
            tag = 2,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer connection_type;

    /**
     * 必填！移动运营商类型，用于运营商定向广告。0=未知的运营商；1=中国移动；2=中国联通；3=中国电信；
     */
    @WireField(
            tag = 3,
            adapter = "com.squareup.wire.ProtoAdapter#UINT32"
    )
    public final Integer operator_type;

    /**
     * 浏览器ua
     */
    @WireField(
            tag = 4,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String ua;

    /**
     * 必填！移动运营商类型（将来会废弃operator_type）46011
     */
    @WireField(
            tag = 5,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String operator;

    /**
     * 设备的mac地址
     */
    @WireField(
            tag = 6,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String mac;

    /**
     * wifi路由器的mac地址
     */
    @WireField(
            tag = 7,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String wifi_mac;

    /**
     * wifi ssid
     */
    @WireField(
            tag = 8,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String wifi_id;

    /**
     * 设备各种ip取值集合（仅iOS使用）
     */
    @WireField(
            tag = 9,
            keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final Map<String, String> ips;

    /**
     * 运营商名称
     */
    @WireField(
            tag = 10,
            adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String carrier_name;

    public Network(String ipv4, Integer connection_type, Integer operator_type, String ua,
                   String operator, String mac, String wifi_mac, String wifi_id, Map<String, String> ips,
                   String carrier_name) {
        this(ipv4, connection_type, operator_type, ua, operator, mac, wifi_mac, wifi_id, ips, carrier_name, ByteString.EMPTY);
    }

    public Network(String ipv4, Integer connection_type, Integer operator_type, String ua,
                   String operator, String mac, String wifi_mac, String wifi_id, Map<String, String> ips,
                   String carrier_name, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.ipv4 = ipv4;
        this.connection_type = connection_type;
        this.operator_type = operator_type;
        this.ua = ua;
        this.operator = operator;
        this.mac = mac;
        this.wifi_mac = wifi_mac;
        this.wifi_id = wifi_id;
        this.ips = Internal.immutableCopyOf("ips", ips);
        this.carrier_name = carrier_name;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.ipv4 = ipv4;
        builder.connection_type = connection_type;
        builder.operator_type = operator_type;
        builder.ua = ua;
        builder.operator = operator;
        builder.mac = mac;
        builder.wifi_mac = wifi_mac;
        builder.wifi_id = wifi_id;
        builder.ips = Internal.copyOf("ips", ips);
        builder.carrier_name = carrier_name;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof Network)) return false;
        Network o = (Network) other;
        return unknownFields().equals(o.unknownFields())
                && Internal.equals(ipv4, o.ipv4)
                && Internal.equals(connection_type, o.connection_type)
                && Internal.equals(operator_type, o.operator_type)
                && Internal.equals(ua, o.ua)
                && Internal.equals(operator, o.operator)
                && Internal.equals(mac, o.mac)
                && Internal.equals(wifi_mac, o.wifi_mac)
                && Internal.equals(wifi_id, o.wifi_id)
                && ips.equals(o.ips)
                && Internal.equals(carrier_name, o.carrier_name);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (ipv4 != null ? ipv4.hashCode() : 0);
            result = result * 37 + (connection_type != null ? connection_type.hashCode() : 0);
            result = result * 37 + (operator_type != null ? operator_type.hashCode() : 0);
            result = result * 37 + (ua != null ? ua.hashCode() : 0);
            result = result * 37 + (operator != null ? operator.hashCode() : 0);
            result = result * 37 + (mac != null ? mac.hashCode() : 0);
            result = result * 37 + (wifi_mac != null ? wifi_mac.hashCode() : 0);
            result = result * 37 + (wifi_id != null ? wifi_id.hashCode() : 0);
            result = result * 37 + ips.hashCode();
            result = result * 37 + (carrier_name != null ? carrier_name.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (ipv4 != null) builder.append(", ipv4=").append(ipv4);
        if (connection_type != null) builder.append(", connection_type=").append(connection_type);
        if (operator_type != null) builder.append(", operator_type=").append(operator_type);
        if (ua != null) builder.append(", ua=").append(ua);
        if (operator != null) builder.append(", operator=").append(operator);
        if (mac != null) builder.append(", mac=").append(mac);
        if (wifi_mac != null) builder.append(", wifi_mac=").append(wifi_mac);
        if (wifi_id != null) builder.append(", wifi_id=").append(wifi_id);
        if (!ips.isEmpty()) builder.append(", ips=").append(ips);
        if (carrier_name != null) builder.append(", carrier_name=").append(carrier_name);
        return builder.replace(0, 2, "Network{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Network, Builder> {
        public String ipv4 = DEFAULT_IPV4;

        public Integer connection_type = DEFAULT_CONNECTION_TYPE;

        public Integer operator_type = DEFAULT_OPERATOR_TYPE;

        public String ua = DEFAULT_UA;

        public String operator = DEFAULT_OPERATOR;

        public String mac = DEFAULT_MAC;

        public String wifi_mac = DEFAULT_WIFI_MAC;

        public String wifi_id = DEFAULT_WIFI_ID;

        public Map<String, String> ips;

        public String carrier_name = DEFAULT_CARRIER_NAME;

        public Builder() {
            ips = Internal.newMutableMap();
        }

        /**
         * 必填！用户设备的公网IPv4地址，格式要求：255.255.255.255
         */
        public Builder ipv4(String ipv4) {
            this.ipv4 = ipv4;
            return this;
        }

        /**
         * 必填！网络连接类型，用于判断网速。0=无法探测当前网络状态; 1=蜂窝数据接入，未知网络类型; 2=2G; 3=3G; 4=4G; 5=5G; 100=Wi-Fi网络接入; 101=以太网接入
         */
        public Builder connection_type(Integer connection_type) {
            this.connection_type = connection_type;
            return this;
        }

        /**
         * 必填！移动运营商类型，用于运营商定向广告。0=未知的运营商；1=中国移动；2=中国联通；3=中国电信；
         */
        public Builder operator_type(Integer operator_type) {
            this.operator_type = operator_type;
            return this;
        }

        /**
         * 浏览器ua
         */
        public Builder ua(String ua) {
            this.ua = ua;
            return this;
        }

        /**
         * 必填！移动运营商类型（将来会废弃operator_type）46011
         */
        public Builder operator(String operator) {
            this.operator = operator;
            return this;
        }

        /**
         * 设备的mac地址
         */
        public Builder mac(String mac) {
            this.mac = mac;
            return this;
        }

        /**
         * wifi路由器的mac地址
         */
        public Builder wifi_mac(String wifi_mac) {
            this.wifi_mac = wifi_mac;
            return this;
        }

        /**
         * wifi ssid
         */
        public Builder wifi_id(String wifi_id) {
            this.wifi_id = wifi_id;
            return this;
        }

        /**
         * 设备各种ip取值集合（仅iOS使用）
         */
        public Builder ips(Map<String, String> ips) {
            Internal.checkElementsNotNull(ips);
            this.ips = ips;
            return this;
        }

        /**
         * 运营商名称
         */
        public Builder carrier_name(String carrier_name) {
            this.carrier_name = carrier_name;
            return this;
        }

        @Override
        public Network build() {
            return new Network(ipv4, connection_type, operator_type, ua, operator, mac, wifi_mac, wifi_id, ips, carrier_name, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_Network extends ProtoAdapter<Network> {
        private final ProtoAdapter<Map<String, String>> ips = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING);

        public ProtoAdapter_Network() {
            super(FieldEncoding.LENGTH_DELIMITED, Network.class);
        }

        @Override
        public int encodedSize(Network value) {
            return ProtoAdapter.STRING.encodedSizeWithTag(1, value.ipv4)
                    + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.connection_type)
                    + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.operator_type)
                    + ProtoAdapter.STRING.encodedSizeWithTag(4, value.ua)
                    + ProtoAdapter.STRING.encodedSizeWithTag(5, value.operator)
                    + ProtoAdapter.STRING.encodedSizeWithTag(6, value.mac)
                    + ProtoAdapter.STRING.encodedSizeWithTag(7, value.wifi_mac)
                    + ProtoAdapter.STRING.encodedSizeWithTag(8, value.wifi_id)
                    + ips.encodedSizeWithTag(9, value.ips)
                    + ProtoAdapter.STRING.encodedSizeWithTag(10, value.carrier_name)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, Network value) throws IOException {
            ProtoAdapter.STRING.encodeWithTag(writer, 1, value.ipv4);
            ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.connection_type);
            ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.operator_type);
            ProtoAdapter.STRING.encodeWithTag(writer, 4, value.ua);
            ProtoAdapter.STRING.encodeWithTag(writer, 5, value.operator);
            ProtoAdapter.STRING.encodeWithTag(writer, 6, value.mac);
            ProtoAdapter.STRING.encodeWithTag(writer, 7, value.wifi_mac);
            ProtoAdapter.STRING.encodeWithTag(writer, 8, value.wifi_id);
            ips.encodeWithTag(writer, 9, value.ips);
            ProtoAdapter.STRING.encodeWithTag(writer, 10, value.carrier_name);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public Network decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.ipv4(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 2:
                        builder.connection_type(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 3:
                        builder.operator_type(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 4:
                        builder.ua(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 5:
                        builder.operator(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 6:
                        builder.mac(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 7:
                        builder.wifi_mac(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 8:
                        builder.wifi_id(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 9:
                        builder.ips.putAll(ips.decode(reader));
                        break;
                    case 10:
                        builder.carrier_name(ProtoAdapter.STRING.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public Network redact(Network value) {
            Builder builder = value.newBuilder();
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
