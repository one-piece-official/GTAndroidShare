// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_common.proto
package com.czhj.sdk.common.models;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * 广告位信息
 */
public final class AdSlot extends AndroidMessage<AdSlot, AdSlot.Builder> {
    public static final ProtoAdapter<AdSlot> ADAPTER = new ProtoAdapter_AdSlot();

    public static final Parcelable.Creator<AdSlot> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_ADSLOT_ID = "";

    public static final Integer DEFAULT_BIDFLOOR = 0;

    public static final String DEFAULT_VID = "";

    public static final String DEFAULT_LATEST_CAMP_ID = "";

    public static final String DEFAULT_LATEST_CRID = "";

    public static final Integer DEFAULT_SDK_STRATEGY_INDEX = 0;

    public static final Integer DEFAULT_API_STRATEGY_INDEX = 0;

    public static final Integer DEFAULT_ALGORITHM_FLOOR = 0;

    public static final Integer DEFAULT_EXPECTED_FLOOR = 0;

    public static final Integer DEFAULT_SETTLEMENT_MODE = 0;

    public static final Integer DEFAULT_ALG_BID_TYPE = 0;

    public static final Integer DEFAULT_ECPM_TARGET = 0;

    public static final Integer DEFAULT_SETTLEMENT_SETTING = 0;

    public static final Integer DEFAULT_COMMER_ECPM = 0;

    public static final Integer DEFAULT_ADX_ECPM = 0;

    public static final Integer DEFAULT_COMMER_ECPM_STATE = 0;

    public static final Integer DEFAULT_AD_COUNT = 0;

    public static final Boolean DEFAULT_DISABLE_MRAID2 = false;

    public static final Integer DEFAULT_MEDIA_REQUEST_COUNT = 0;

    public static final Integer DEFAULT_MEDIA_READY_COUNT = 0;

    public static final Long DEFAULT_PRE_REQ_TIME = 0L;

    public static final Integer DEFAULT_REQ_INTERVAL_TIME = 0;

    public static final Integer DEFAULT_CACHED_AD_SIZE = 0;

    /**
     * 必填！广告位ID
     */
    @WireField(tag = 1, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String adslot_id;

    /**
     * 必填！广告位尺寸。暂不填写，后续产品确定策略有再议
     */
    @WireField(tag = 2, adapter = "com.sigmob.sdk.common.models.Size#ADAPTER")
    public final Size adslot_size;

    /**
     * 选填！支持的广告位类型（目前只支持一种）。 1=通用奖励视频 2=开屏
     */
    @WireField(tag = 3, adapter = "com.squareup.wire.ProtoAdapter#UINT32", label = WireField.Label.REPEATED)
    public final List<Integer> adslot_type;

    /**
     * 底价
     */
    @WireField(tag = 4, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer bidfloor;

    /**
     * 曝光ID，该广告位此次请求曝光唯一ID。可用requestid + adslot序列号生成
     */
    @WireField(tag = 5, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String vid;

    /**
     * 上一次播放的campaign id
     */
    @WireField(tag = 6, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String latest_camp_id;

    /**
     * 上一次播放的Creative id
     */
    @WireField(tag = 7, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String latest_crid;

    /**
     * 媒体支持的素材格式列表。激励视频广告先填空。（素材的子类型，比如开屏的图片类型）
     */
    @WireField(tag = 8, adapter = "com.squareup.wire.ProtoAdapter#UINT32", label = WireField.Label.REPEATED)
    public final List<Integer> material_type;

    /**
     * sdk聚合策略位置。从1开始
     */
    @WireField(tag = 9, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer sdk_strategy_index;

    /**
     * api聚合策略位置。从1开始
     */
    @WireField(tag = 10, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer api_strategy_index;

    /**
     * sdk已经缓存的广告，key：Creative Id，value：Campaign Id
     */
    @WireField(tag = 11, keyAdapter = "com.squareup.wire.ProtoAdapter#STRING", adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final Map<String, String> sdk_cached_ads;

    /**
     * 媒体支持的创意类型，与reponse中MaterialMeta的creative_type一致（sdk从2.10开始补传开屏支持的创意类型3和8）
     */
    @WireField(tag = 12, adapter = "com.squareup.wire.ProtoAdapter#UINT32", label = WireField.Label.REPEATED)
    public final List<Integer> creative_type;

    /**
     * 期望价格，对应【算法 eCPM Floor】
     */
    @WireField(tag = 13, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer algorithm_floor;

    /**
     * key:template_type,表示模版类型，0表示没有伴随条；key:animate_type,表示动画类型，0表示没有伴随条
     */
    @WireField(tag = 14, keyAdapter = "com.squareup.wire.ProtoAdapter#STRING", adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final Map<String, String> ext;

    /**
     * key:广告位id
     */
    @WireField(tag = 15, keyAdapter = "com.squareup.wire.ProtoAdapter#STRING", adapter = "com.sigmob.sdk.common.models.AdCache#ADAPTER")
    public final Map<String, AdCache> ad_caches;

    /**
     * 视频素材请求参数
     */
    @WireField(tag = 16, adapter = "com.sigmob.sdk.common.models.Video#ADAPTER")
    public final Video video;

    /**
     * 流量售卖底价, 根据Supply端多重价格考虑因素计算得出
     */
    @WireField(tag = 17, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer expected_floor;

    /**
     * (将废弃，改用settlement_setting)结算方式：0-固定价格或分成，1-按竞价成交价格累计计费，2-开发者自设floor累计计费
     */
    @WireField(tag = 19, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer settlement_mode;

    /**
     * 0-代表走正常floor, 1-算法侧按target调节
     */
    @WireField(tag = 20, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer alg_bid_type;

    /**
     * 平台计算出的ecpm target，单位：分
     */
    @WireField(tag = 21, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer ecpm_target;

    /**
     * 平台设置的结算模式，1:分成结算，2:固定eRPM结算，3:竞价计算，4:eCPM底价结算
     */
    @WireField(tag = 22, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer settlement_setting;

    /**
     * 商务ecpm，单位：分
     */
    @WireField(tag = 23, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer commer_ecpm;

    /**
     * 程序化ecpm,固定erpm计算模式下且商务ecpm>0的情况下，expected_price=adx_ecpm, 单位：分
     */
    @WireField(tag = 24, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer adx_ecpm;

    /**
     * 固定erpm结算模式状态：0、关闭，1:开启
     */
    @WireField(tag = 25, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer commer_ecpm_state;

    /**
     * 请求的广告数
     */
    @WireField(tag = 28, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer ad_count;

    /**
     * sdk支持的原生模版ID列表
     */
    @WireField(tag = 46, adapter = "com.squareup.wire.ProtoAdapter#UINT32", label = WireField.Label.REPEATED)
    public final List<Integer> support_template_id;

    /**
     * 禁用mraid2.0模版广告。false-不禁用； true-禁用
     */
    @WireField(tag = 48, adapter = "com.squareup.wire.ProtoAdapter#BOOL")
    public final Boolean disable_mraid2;

    /**
     * 上一轮开发者请求量
     */
    @WireField(tag = 52, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer media_request_count;

    /**
     * 上一轮给开发者的填充量
     */
    @WireField(tag = 53, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer media_ready_count;

    /**
     * 上一轮请求时间(unix时间戳，毫秒)
     */
    @WireField(tag = 54, adapter = "com.squareup.wire.ProtoAdapter#INT64")
    public final Long pre_req_time;

    /**
     * 配置间隔时间
     */
    @WireField(tag = 55, adapter = "com.squareup.wire.ProtoAdapter#INT32")
    public final Integer req_interval_time;

    /**
     * 缓存的广告数量
     */
    @WireField(tag = 56, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer cached_ad_size;

    public AdSlot(String adslot_id, Size adslot_size, List<Integer> adslot_type, Integer bidfloor, String vid, String latest_camp_id, String latest_crid, List<Integer> material_type, Integer sdk_strategy_index, Integer api_strategy_index, Map<String, String> sdk_cached_ads, List<Integer> creative_type, Integer algorithm_floor, Map<String, String> ext, Map<String, AdCache> ad_caches, Video video, Integer expected_floor, Integer settlement_mode, Integer alg_bid_type, Integer ecpm_target, Integer settlement_setting, Integer commer_ecpm, Integer adx_ecpm, Integer commer_ecpm_state, Integer ad_count, List<Integer> support_template_id, Boolean disable_mraid2, Integer media_request_count, Integer media_ready_count, Long pre_req_time, Integer req_interval_time, Integer cached_ad_size) {
        this(adslot_id, adslot_size, adslot_type, bidfloor, vid, latest_camp_id, latest_crid, material_type, sdk_strategy_index, api_strategy_index, sdk_cached_ads, creative_type, algorithm_floor, ext, ad_caches, video, expected_floor, settlement_mode, alg_bid_type, ecpm_target, settlement_setting, commer_ecpm, adx_ecpm, commer_ecpm_state, ad_count, support_template_id, disable_mraid2, media_request_count, media_ready_count, pre_req_time, req_interval_time, cached_ad_size, ByteString.EMPTY);
    }

    public AdSlot(String adslot_id, Size adslot_size, List<Integer> adslot_type, Integer bidfloor, String vid, String latest_camp_id, String latest_crid, List<Integer> material_type, Integer sdk_strategy_index, Integer api_strategy_index, Map<String, String> sdk_cached_ads, List<Integer> creative_type, Integer algorithm_floor, Map<String, String> ext, Map<String, AdCache> ad_caches, Video video, Integer expected_floor, Integer settlement_mode, Integer alg_bid_type, Integer ecpm_target, Integer settlement_setting, Integer commer_ecpm, Integer adx_ecpm, Integer commer_ecpm_state, Integer ad_count, List<Integer> support_template_id, Boolean disable_mraid2, Integer media_request_count, Integer media_ready_count, Long pre_req_time, Integer req_interval_time, Integer cached_ad_size, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.adslot_id = adslot_id;
        this.adslot_size = adslot_size;
        this.adslot_type = Internal.immutableCopyOf("adslot_type", adslot_type);
        this.bidfloor = bidfloor;
        this.vid = vid;
        this.latest_camp_id = latest_camp_id;
        this.latest_crid = latest_crid;
        this.material_type = Internal.immutableCopyOf("material_type", material_type);
        this.sdk_strategy_index = sdk_strategy_index;
        this.api_strategy_index = api_strategy_index;
        this.sdk_cached_ads = Internal.immutableCopyOf("sdk_cached_ads", sdk_cached_ads);
        this.creative_type = Internal.immutableCopyOf("creative_type", creative_type);
        this.algorithm_floor = algorithm_floor;
        this.ext = Internal.immutableCopyOf("ext", ext);
        this.ad_caches = Internal.immutableCopyOf("ad_caches", ad_caches);
        this.video = video;
        this.expected_floor = expected_floor;
        this.settlement_mode = settlement_mode;
        this.alg_bid_type = alg_bid_type;
        this.ecpm_target = ecpm_target;
        this.settlement_setting = settlement_setting;
        this.commer_ecpm = commer_ecpm;
        this.adx_ecpm = adx_ecpm;
        this.commer_ecpm_state = commer_ecpm_state;
        this.ad_count = ad_count;
        this.support_template_id = Internal.immutableCopyOf("support_template_id", support_template_id);
        this.disable_mraid2 = disable_mraid2;
        this.media_request_count = media_request_count;
        this.media_ready_count = media_ready_count;
        this.pre_req_time = pre_req_time;
        this.req_interval_time = req_interval_time;
        this.cached_ad_size = cached_ad_size;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.adslot_id = adslot_id;
        builder.adslot_size = adslot_size;
        builder.adslot_type = Internal.copyOf("adslot_type", adslot_type);
        builder.bidfloor = bidfloor;
        builder.vid = vid;
        builder.latest_camp_id = latest_camp_id;
        builder.latest_crid = latest_crid;
        builder.material_type = Internal.copyOf("material_type", material_type);
        builder.sdk_strategy_index = sdk_strategy_index;
        builder.api_strategy_index = api_strategy_index;
        builder.sdk_cached_ads = Internal.copyOf("sdk_cached_ads", sdk_cached_ads);
        builder.creative_type = Internal.copyOf("creative_type", creative_type);
        builder.algorithm_floor = algorithm_floor;
        builder.ext = Internal.copyOf("ext", ext);
        builder.ad_caches = Internal.copyOf("ad_caches", ad_caches);
        builder.video = video;
        builder.expected_floor = expected_floor;
        builder.settlement_mode = settlement_mode;
        builder.alg_bid_type = alg_bid_type;
        builder.ecpm_target = ecpm_target;
        builder.settlement_setting = settlement_setting;
        builder.commer_ecpm = commer_ecpm;
        builder.adx_ecpm = adx_ecpm;
        builder.commer_ecpm_state = commer_ecpm_state;
        builder.ad_count = ad_count;
        builder.support_template_id = Internal.copyOf("support_template_id", support_template_id);
        builder.disable_mraid2 = disable_mraid2;
        builder.media_request_count = media_request_count;
        builder.media_ready_count = media_ready_count;
        builder.pre_req_time = pre_req_time;
        builder.req_interval_time = req_interval_time;
        builder.cached_ad_size = cached_ad_size;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof AdSlot)) return false;
        AdSlot o = (AdSlot) other;
        return unknownFields().equals(o.unknownFields()) && Internal.equals(adslot_id, o.adslot_id) && Internal.equals(adslot_size, o.adslot_size) && adslot_type.equals(o.adslot_type) && Internal.equals(bidfloor, o.bidfloor) && Internal.equals(vid, o.vid) && Internal.equals(latest_camp_id, o.latest_camp_id) && Internal.equals(latest_crid, o.latest_crid) && material_type.equals(o.material_type) && Internal.equals(sdk_strategy_index, o.sdk_strategy_index) && Internal.equals(api_strategy_index, o.api_strategy_index) && sdk_cached_ads.equals(o.sdk_cached_ads) && creative_type.equals(o.creative_type) && Internal.equals(algorithm_floor, o.algorithm_floor) && ext.equals(o.ext) && ad_caches.equals(o.ad_caches) && Internal.equals(video, o.video) && Internal.equals(expected_floor, o.expected_floor) && Internal.equals(settlement_mode, o.settlement_mode) && Internal.equals(alg_bid_type, o.alg_bid_type) && Internal.equals(ecpm_target, o.ecpm_target) && Internal.equals(settlement_setting, o.settlement_setting) && Internal.equals(commer_ecpm, o.commer_ecpm) && Internal.equals(adx_ecpm, o.adx_ecpm) && Internal.equals(commer_ecpm_state, o.commer_ecpm_state) && Internal.equals(ad_count, o.ad_count) && support_template_id.equals(o.support_template_id) && Internal.equals(disable_mraid2, o.disable_mraid2) && Internal.equals(media_request_count, o.media_request_count) && Internal.equals(media_ready_count, o.media_ready_count) && Internal.equals(pre_req_time, o.pre_req_time) && Internal.equals(req_interval_time, o.req_interval_time) && Internal.equals(cached_ad_size, o.cached_ad_size);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (adslot_id != null ? adslot_id.hashCode() : 0);
            result = result * 37 + (adslot_size != null ? adslot_size.hashCode() : 0);
            result = result * 37 + adslot_type.hashCode();
            result = result * 37 + (bidfloor != null ? bidfloor.hashCode() : 0);
            result = result * 37 + (vid != null ? vid.hashCode() : 0);
            result = result * 37 + (latest_camp_id != null ? latest_camp_id.hashCode() : 0);
            result = result * 37 + (latest_crid != null ? latest_crid.hashCode() : 0);
            result = result * 37 + material_type.hashCode();
            result = result * 37 + (sdk_strategy_index != null ? sdk_strategy_index.hashCode() : 0);
            result = result * 37 + (api_strategy_index != null ? api_strategy_index.hashCode() : 0);
            result = result * 37 + sdk_cached_ads.hashCode();
            result = result * 37 + creative_type.hashCode();
            result = result * 37 + (algorithm_floor != null ? algorithm_floor.hashCode() : 0);
            result = result * 37 + ext.hashCode();
            result = result * 37 + ad_caches.hashCode();
            result = result * 37 + (video != null ? video.hashCode() : 0);
            result = result * 37 + (expected_floor != null ? expected_floor.hashCode() : 0);
            result = result * 37 + (settlement_mode != null ? settlement_mode.hashCode() : 0);
            result = result * 37 + (alg_bid_type != null ? alg_bid_type.hashCode() : 0);
            result = result * 37 + (ecpm_target != null ? ecpm_target.hashCode() : 0);
            result = result * 37 + (settlement_setting != null ? settlement_setting.hashCode() : 0);
            result = result * 37 + (commer_ecpm != null ? commer_ecpm.hashCode() : 0);
            result = result * 37 + (adx_ecpm != null ? adx_ecpm.hashCode() : 0);
            result = result * 37 + (commer_ecpm_state != null ? commer_ecpm_state.hashCode() : 0);
            result = result * 37 + (ad_count != null ? ad_count.hashCode() : 0);
            result = result * 37 + support_template_id.hashCode();
            result = result * 37 + (disable_mraid2 != null ? disable_mraid2.hashCode() : 0);
            result = result * 37 + (media_request_count != null ? media_request_count.hashCode() : 0);
            result = result * 37 + (media_ready_count != null ? media_ready_count.hashCode() : 0);
            result = result * 37 + (pre_req_time != null ? pre_req_time.hashCode() : 0);
            result = result * 37 + (req_interval_time != null ? req_interval_time.hashCode() : 0);
            result = result * 37 + (cached_ad_size != null ? cached_ad_size.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (adslot_id != null) builder.append(", adslot_id=").append(adslot_id);
        if (adslot_size != null) builder.append(", adslot_size=").append(adslot_size);
        if (!adslot_type.isEmpty()) builder.append(", adslot_type=").append(adslot_type);
        if (bidfloor != null) builder.append(", bidfloor=").append(bidfloor);
        if (vid != null) builder.append(", vid=").append(vid);
        if (latest_camp_id != null) builder.append(", latest_camp_id=").append(latest_camp_id);
        if (latest_crid != null) builder.append(", latest_crid=").append(latest_crid);
        if (!material_type.isEmpty()) builder.append(", material_type=").append(material_type);
        if (sdk_strategy_index != null)
            builder.append(", sdk_strategy_index=").append(sdk_strategy_index);
        if (api_strategy_index != null)
            builder.append(", api_strategy_index=").append(api_strategy_index);
        if (!sdk_cached_ads.isEmpty()) builder.append(", sdk_cached_ads=").append(sdk_cached_ads);
        if (!creative_type.isEmpty()) builder.append(", creative_type=").append(creative_type);
        if (algorithm_floor != null) builder.append(", algorithm_floor=").append(algorithm_floor);
        if (!ext.isEmpty()) builder.append(", ext=").append(ext);
        if (!ad_caches.isEmpty()) builder.append(", ad_caches=").append(ad_caches);
        if (video != null) builder.append(", video=").append(video);
        if (expected_floor != null) builder.append(", expected_floor=").append(expected_floor);
        if (settlement_mode != null) builder.append(", settlement_mode=").append(settlement_mode);
        if (alg_bid_type != null) builder.append(", alg_bid_type=").append(alg_bid_type);
        if (ecpm_target != null) builder.append(", ecpm_target=").append(ecpm_target);
        if (settlement_setting != null)
            builder.append(", settlement_setting=").append(settlement_setting);
        if (commer_ecpm != null) builder.append(", commer_ecpm=").append(commer_ecpm);
        if (adx_ecpm != null) builder.append(", adx_ecpm=").append(adx_ecpm);
        if (commer_ecpm_state != null)
            builder.append(", commer_ecpm_state=").append(commer_ecpm_state);
        if (ad_count != null) builder.append(", ad_count=").append(ad_count);
        if (!support_template_id.isEmpty())
            builder.append(", support_template_id=").append(support_template_id);
        if (disable_mraid2 != null) builder.append(", disable_mraid2=").append(disable_mraid2);
        if (media_request_count != null)
            builder.append(", media_request_count=").append(media_request_count);
        if (media_ready_count != null)
            builder.append(", media_ready_count=").append(media_ready_count);
        if (pre_req_time != null) builder.append(", pre_req_time=").append(pre_req_time);
        if (req_interval_time != null)
            builder.append(", req_interval_time=").append(req_interval_time);
        if (cached_ad_size != null) builder.append(", cached_ad_size=").append(cached_ad_size);
        return builder.replace(0, 2, "AdSlot{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<AdSlot, Builder> {
        public String adslot_id;

        public Size adslot_size;

        public List<Integer> adslot_type;

        public Integer bidfloor;

        public String vid;

        public String latest_camp_id;

        public String latest_crid;

        public List<Integer> material_type;

        public Integer sdk_strategy_index;

        public Integer api_strategy_index;

        public Map<String, String> sdk_cached_ads;

        public List<Integer> creative_type;

        public Integer algorithm_floor;

        public Map<String, String> ext;

        public Map<String, AdCache> ad_caches;

        public Video video;

        public Integer expected_floor;

        public Integer settlement_mode;

        public Integer alg_bid_type;

        public Integer ecpm_target;

        public Integer settlement_setting;

        public Integer commer_ecpm;

        public Integer adx_ecpm;

        public Integer commer_ecpm_state;

        public Integer ad_count;

        public List<Integer> support_template_id;

        public Boolean disable_mraid2;

        public Integer media_request_count;

        public Integer media_ready_count;

        public Long pre_req_time;

        public Integer req_interval_time;

        public Integer cached_ad_size;

        public Builder() {
            adslot_type = Internal.newMutableList();
            material_type = Internal.newMutableList();
            sdk_cached_ads = Internal.newMutableMap();
            creative_type = Internal.newMutableList();
            ext = Internal.newMutableMap();
            ad_caches = Internal.newMutableMap();
            support_template_id = Internal.newMutableList();
        }

        /**
         * 必填！广告位ID
         */
        public Builder adslot_id(String adslot_id) {
            this.adslot_id = adslot_id;
            return this;
        }

        /**
         * 必填！广告位尺寸。暂不填写，后续产品确定策略有再议
         */
        public Builder adslot_size(Size adslot_size) {
            this.adslot_size = adslot_size;
            return this;
        }

        /**
         * 选填！支持的广告位类型（目前只支持一种）。 1=通用奖励视频 2=开屏
         */
        public Builder adslot_type(List<Integer> adslot_type) {
            Internal.checkElementsNotNull(adslot_type);
            this.adslot_type = adslot_type;
            return this;
        }

        /**
         * 底价
         */
        public Builder bidfloor(Integer bidfloor) {
            this.bidfloor = bidfloor;
            return this;
        }

        /**
         * 曝光ID，该广告位此次请求曝光唯一ID。可用requestid + adslot序列号生成
         */
        public Builder vid(String vid) {
            this.vid = vid;
            return this;
        }

        /**
         * 上一次播放的campaign id
         */
        public Builder latest_camp_id(String latest_camp_id) {
            this.latest_camp_id = latest_camp_id;
            return this;
        }

        /**
         * 上一次播放的Creative id
         */
        public Builder latest_crid(String latest_crid) {
            this.latest_crid = latest_crid;
            return this;
        }

        /**
         * 媒体支持的素材格式列表。激励视频广告先填空。（素材的子类型，比如开屏的图片类型）
         */
        public Builder material_type(List<Integer> material_type) {
            Internal.checkElementsNotNull(material_type);
            this.material_type = material_type;
            return this;
        }

        /**
         * sdk聚合策略位置。从1开始
         */
        public Builder sdk_strategy_index(Integer sdk_strategy_index) {
            this.sdk_strategy_index = sdk_strategy_index;
            return this;
        }

        /**
         * api聚合策略位置。从1开始
         */
        public Builder api_strategy_index(Integer api_strategy_index) {
            this.api_strategy_index = api_strategy_index;
            return this;
        }

        /**
         * sdk已经缓存的广告，key：Creative Id，value：Campaign Id
         */
        public Builder sdk_cached_ads(Map<String, String> sdk_cached_ads) {
            Internal.checkElementsNotNull(sdk_cached_ads);
            this.sdk_cached_ads = sdk_cached_ads;
            return this;
        }

        /**
         * 媒体支持的创意类型，与reponse中MaterialMeta的creative_type一致（sdk从2.10开始补传开屏支持的创意类型3和8）
         */
        public Builder creative_type(List<Integer> creative_type) {
            Internal.checkElementsNotNull(creative_type);
            this.creative_type = creative_type;
            return this;
        }

        /**
         * 期望价格，对应【算法 eCPM Floor】
         */
        public Builder algorithm_floor(Integer algorithm_floor) {
            this.algorithm_floor = algorithm_floor;
            return this;
        }

        /**
         * key:template_type,表示模版类型，0表示没有伴随条；key:animate_type,表示动画类型，0表示没有伴随条
         */
        public Builder ext(Map<String, String> ext) {
            Internal.checkElementsNotNull(ext);
            this.ext = ext;
            return this;
        }

        /**
         * key:广告位id
         */
        public Builder ad_caches(Map<String, AdCache> ad_caches) {
            Internal.checkElementsNotNull(ad_caches);
            this.ad_caches = ad_caches;
            return this;
        }

        /**
         * 视频素材请求参数
         */
        public Builder video(Video video) {
            this.video = video;
            return this;
        }

        /**
         * 流量售卖底价, 根据Supply端多重价格考虑因素计算得出
         */
        public Builder expected_floor(Integer expected_floor) {
            this.expected_floor = expected_floor;
            return this;
        }

        /**
         * (将废弃，改用settlement_setting)结算方式：0-固定价格或分成，1-按竞价成交价格累计计费，2-开发者自设floor累计计费
         */
        public Builder settlement_mode(Integer settlement_mode) {
            this.settlement_mode = settlement_mode;
            return this;
        }

        /**
         * 0-代表走正常floor, 1-算法侧按target调节
         */
        public Builder alg_bid_type(Integer alg_bid_type) {
            this.alg_bid_type = alg_bid_type;
            return this;
        }

        /**
         * 平台计算出的ecpm target，单位：分
         */
        public Builder ecpm_target(Integer ecpm_target) {
            this.ecpm_target = ecpm_target;
            return this;
        }

        /**
         * 平台设置的结算模式，1:分成结算，2:固定eRPM结算，3:竞价计算，4:eCPM底价结算
         */
        public Builder settlement_setting(Integer settlement_setting) {
            this.settlement_setting = settlement_setting;
            return this;
        }

        /**
         * 商务ecpm，单位：分
         */
        public Builder commer_ecpm(Integer commer_ecpm) {
            this.commer_ecpm = commer_ecpm;
            return this;
        }

        /**
         * 程序化ecpm,固定erpm计算模式下且商务ecpm>0的情况下，expected_price=adx_ecpm, 单位：分
         */
        public Builder adx_ecpm(Integer adx_ecpm) {
            this.adx_ecpm = adx_ecpm;
            return this;
        }

        /**
         * 固定erpm结算模式状态：0、关闭，1:开启
         */
        public Builder commer_ecpm_state(Integer commer_ecpm_state) {
            this.commer_ecpm_state = commer_ecpm_state;
            return this;
        }

        /**
         * 请求的广告数
         */
        public Builder ad_count(Integer ad_count) {
            this.ad_count = ad_count;
            return this;
        }

        /**
         * sdk支持的原生模版ID列表
         */
        public Builder support_template_id(List<Integer> support_template_id) {
            Internal.checkElementsNotNull(support_template_id);
            this.support_template_id = support_template_id;
            return this;
        }

        /**
         * 禁用mraid2.0模版广告。false-不禁用； true-禁用
         */
        public Builder disable_mraid2(Boolean disable_mraid2) {
            this.disable_mraid2 = disable_mraid2;
            return this;
        }

        /**
         * 上一轮开发者请求量
         */
        public Builder media_request_count(Integer media_request_count) {
            this.media_request_count = media_request_count;
            return this;
        }

        /**
         * 上一轮给开发者的填充量
         */
        public Builder media_ready_count(Integer media_ready_count) {
            this.media_ready_count = media_ready_count;
            return this;
        }

        /**
         * 上一轮请求时间(unix时间戳，毫秒)
         */
        public Builder pre_req_time(Long pre_req_time) {
            this.pre_req_time = pre_req_time;
            return this;
        }

        /**
         * 配置间隔时间
         */
        public Builder req_interval_time(Integer req_interval_time) {
            this.req_interval_time = req_interval_time;
            return this;
        }

        /**
         * 缓存的广告数量
         */
        public Builder cached_ad_size(Integer cached_ad_size) {
            this.cached_ad_size = cached_ad_size;
            return this;
        }

        @Override
        public AdSlot build() {
            return new AdSlot(adslot_id, adslot_size, adslot_type, bidfloor, vid, latest_camp_id, latest_crid, material_type, sdk_strategy_index, api_strategy_index, sdk_cached_ads, creative_type, algorithm_floor, ext, ad_caches, video, expected_floor, settlement_mode, alg_bid_type, ecpm_target, settlement_setting, commer_ecpm, adx_ecpm, commer_ecpm_state, ad_count, support_template_id, disable_mraid2, media_request_count, media_ready_count, pre_req_time, req_interval_time, cached_ad_size, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_AdSlot extends ProtoAdapter<AdSlot> {
        private final ProtoAdapter<Map<String, String>> sdk_cached_ads = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING);

        private final ProtoAdapter<Map<String, String>> ext = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING);

        private final ProtoAdapter<Map<String, AdCache>> ad_caches = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, AdCache.ADAPTER);

        public ProtoAdapter_AdSlot() {
            super(FieldEncoding.LENGTH_DELIMITED, AdSlot.class);
        }

        @Override
        public int encodedSize(AdSlot value) {
            return ProtoAdapter.STRING.encodedSizeWithTag(1, value.adslot_id) + Size.ADAPTER.encodedSizeWithTag(2, value.adslot_size) + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(3, value.adslot_type) + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.bidfloor) + ProtoAdapter.STRING.encodedSizeWithTag(5, value.vid) + ProtoAdapter.STRING.encodedSizeWithTag(6, value.latest_camp_id) + ProtoAdapter.STRING.encodedSizeWithTag(7, value.latest_crid) + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(8, value.material_type) + ProtoAdapter.UINT32.encodedSizeWithTag(9, value.sdk_strategy_index) + ProtoAdapter.UINT32.encodedSizeWithTag(10, value.api_strategy_index) + sdk_cached_ads.encodedSizeWithTag(11, value.sdk_cached_ads) + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(12, value.creative_type) + ProtoAdapter.UINT32.encodedSizeWithTag(13, value.algorithm_floor) + ext.encodedSizeWithTag(14, value.ext) + ad_caches.encodedSizeWithTag(15, value.ad_caches) + Video.ADAPTER.encodedSizeWithTag(16, value.video) + ProtoAdapter.UINT32.encodedSizeWithTag(17, value.expected_floor) + ProtoAdapter.UINT32.encodedSizeWithTag(19, value.settlement_mode) + ProtoAdapter.UINT32.encodedSizeWithTag(20, value.alg_bid_type) + ProtoAdapter.UINT32.encodedSizeWithTag(21, value.ecpm_target) + ProtoAdapter.UINT32.encodedSizeWithTag(22, value.settlement_setting) + ProtoAdapter.UINT32.encodedSizeWithTag(23, value.commer_ecpm) + ProtoAdapter.UINT32.encodedSizeWithTag(24, value.adx_ecpm) + ProtoAdapter.UINT32.encodedSizeWithTag(25, value.commer_ecpm_state) + ProtoAdapter.UINT32.encodedSizeWithTag(28, value.ad_count) + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(46, value.support_template_id) + ProtoAdapter.BOOL.encodedSizeWithTag(48, value.disable_mraid2) + ProtoAdapter.UINT32.encodedSizeWithTag(52, value.media_request_count) + ProtoAdapter.UINT32.encodedSizeWithTag(53, value.media_ready_count) + ProtoAdapter.INT64.encodedSizeWithTag(54, value.pre_req_time) + ProtoAdapter.INT32.encodedSizeWithTag(55, value.req_interval_time) + ProtoAdapter.UINT32.encodedSizeWithTag(56, value.cached_ad_size) + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, AdSlot value) throws IOException {
            ProtoAdapter.STRING.encodeWithTag(writer, 1, value.adslot_id);
            Size.ADAPTER.encodeWithTag(writer, 2, value.adslot_size);
            ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 3, value.adslot_type);
            ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.bidfloor);
            ProtoAdapter.STRING.encodeWithTag(writer, 5, value.vid);
            ProtoAdapter.STRING.encodeWithTag(writer, 6, value.latest_camp_id);
            ProtoAdapter.STRING.encodeWithTag(writer, 7, value.latest_crid);
            ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 8, value.material_type);
            ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.sdk_strategy_index);
            ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.api_strategy_index);
            sdk_cached_ads.encodeWithTag(writer, 11, value.sdk_cached_ads);
            ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 12, value.creative_type);
            ProtoAdapter.UINT32.encodeWithTag(writer, 13, value.algorithm_floor);
            ext.encodeWithTag(writer, 14, value.ext);
            ad_caches.encodeWithTag(writer, 15, value.ad_caches);
            Video.ADAPTER.encodeWithTag(writer, 16, value.video);
            ProtoAdapter.UINT32.encodeWithTag(writer, 17, value.expected_floor);
            ProtoAdapter.UINT32.encodeWithTag(writer, 19, value.settlement_mode);
            ProtoAdapter.UINT32.encodeWithTag(writer, 20, value.alg_bid_type);
            ProtoAdapter.UINT32.encodeWithTag(writer, 21, value.ecpm_target);
            ProtoAdapter.UINT32.encodeWithTag(writer, 22, value.settlement_setting);
            ProtoAdapter.UINT32.encodeWithTag(writer, 23, value.commer_ecpm);
            ProtoAdapter.UINT32.encodeWithTag(writer, 24, value.adx_ecpm);
            ProtoAdapter.UINT32.encodeWithTag(writer, 25, value.commer_ecpm_state);
            ProtoAdapter.UINT32.encodeWithTag(writer, 28, value.ad_count);
            ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 46, value.support_template_id);
            ProtoAdapter.BOOL.encodeWithTag(writer, 48, value.disable_mraid2);
            ProtoAdapter.UINT32.encodeWithTag(writer, 52, value.media_request_count);
            ProtoAdapter.UINT32.encodeWithTag(writer, 53, value.media_ready_count);
            ProtoAdapter.INT64.encodeWithTag(writer, 54, value.pre_req_time);
            ProtoAdapter.INT32.encodeWithTag(writer, 55, value.req_interval_time);
            ProtoAdapter.UINT32.encodeWithTag(writer, 56, value.cached_ad_size);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public AdSlot decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.adslot_id(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 2:
                        builder.adslot_size(Size.ADAPTER.decode(reader));
                        break;
                    case 3:
                        builder.adslot_type.add(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 4:
                        builder.bidfloor(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 5:
                        builder.vid(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 6:
                        builder.latest_camp_id(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 7:
                        builder.latest_crid(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 8:
                        builder.material_type.add(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 9:
                        builder.sdk_strategy_index(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 10:
                        builder.api_strategy_index(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 11:
                        builder.sdk_cached_ads.putAll(sdk_cached_ads.decode(reader));
                        break;
                    case 12:
                        builder.creative_type.add(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 13:
                        builder.algorithm_floor(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 14:
                        builder.ext.putAll(ext.decode(reader));
                        break;
                    case 15:
                        builder.ad_caches.putAll(ad_caches.decode(reader));
                        break;
                    case 16:
                        builder.video(Video.ADAPTER.decode(reader));
                        break;
                    case 17:
                        builder.expected_floor(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 19:
                        builder.settlement_mode(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 20:
                        builder.alg_bid_type(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 21:
                        builder.ecpm_target(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 22:
                        builder.settlement_setting(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 23:
                        builder.commer_ecpm(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 24:
                        builder.adx_ecpm(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 25:
                        builder.commer_ecpm_state(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 28:
                        builder.ad_count(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 46:
                        builder.support_template_id.add(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 48:
                        builder.disable_mraid2(ProtoAdapter.BOOL.decode(reader));
                        break;
                    case 52:
                        builder.media_request_count(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 53:
                        builder.media_ready_count(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 54:
                        builder.pre_req_time(ProtoAdapter.INT64.decode(reader));
                        break;
                    case 55:
                        builder.req_interval_time(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 56:
                        builder.cached_ad_size(ProtoAdapter.UINT32.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public AdSlot redact(AdSlot value) {
            Builder builder = value.newBuilder();
            if (builder.adslot_size != null)
                builder.adslot_size = Size.ADAPTER.redact(builder.adslot_size);
            Internal.redactElements(builder.ad_caches, AdCache.ADAPTER);
            if (builder.video != null) builder.video = Video.ADAPTER.redact(builder.video);
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
