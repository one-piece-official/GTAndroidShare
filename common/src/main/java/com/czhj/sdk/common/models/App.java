// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigmob_common.proto
package com.czhj.sdk.common.models;

import android.os.Parcelable;

import com.czhj.wire.AndroidMessage;
import com.czhj.wire.FieldEncoding;
import com.czhj.wire.Message;
import com.czhj.wire.ProtoAdapter;
import com.czhj.wire.ProtoReader;
import com.czhj.wire.ProtoWriter;
import com.czhj.wire.WireField;
import com.czhj.wire.internal.Internal;
import com.czhj.wire.okio.ByteString;

import java.io.IOException;
import java.util.List;

public final class App extends AndroidMessage<App, App.Builder> {

    public static final ProtoAdapter<App> ADAPTER = new ProtoAdapter_App();

    public static final Parcelable.Creator<App> CREATOR = AndroidMessage.newCreator(ADAPTER);

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_APP_ID = "";

    public static final String DEFAULT_APP_PACKAGE = "";

    public static final Integer DEFAULT_ORIENTATION = 0;

    public static final String DEFAULT_NAME = "";

    public static final String DEFAULT_IDFV = "";

    public static final String DEFAULT_CHANNEL_ID = "";

    public static final String DEFAULT_PRODUCT_ID = "";

    public static final Boolean DEFAULT_SUPPORT_HTTP = false;

    public static final String DEFAULT_SUPPORT_SK_VERSION = "";

    public static final Long DEFAULT_INSTALL_TIME = 0L;

    /**
     * 应用ID
     */
    @WireField(tag = 1, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String app_id;

    /**
     * 必填！应用版本
     */
    @WireField(tag = 2, adapter = "com.sigmob.sdk.common.models.Version#ADAPTER")
    public final Version app_version;

    /**
     * 必填！应用包名。IOS设备为bundle id
     */
    @WireField(tag = 3, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String app_package;

    /**
     * app方向：0: MaskAll、1:portrait、2:landspace
     */
    @WireField(tag = 4, adapter = "com.squareup.wire.ProtoAdapter#UINT32")
    public final Integer orientation;

    /**
     * app名称
     */
    @WireField(tag = 5, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String name;

    /**
     * Vindor标示符，适用于对内：例如分析用户在应用内的行为等。
     */
    @WireField(tag = 6, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String idfv;

    /**
     * 应用商店的渠道标识。字典同yomob的渠道字典，当前也只有yomob需要
     */
    @WireField(tag = 7, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String channel_id;

    /**
     * 媒体在投放系统中的apple id（iOS） 或 package name（Android）
     */
    @WireField(tag = 8, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String product_id;

    /**
     * app是否支持http
     */
    @WireField(tag = 9, adapter = "com.squareup.wire.ProtoAdapter#BOOL")
    public final Boolean support_http;

    /**
     * 媒体在info.plist中配置的SKAdNetworkId列表
     */
    @WireField(tag = 10, adapter = "com.squareup.wire.ProtoAdapter#STRING", label = WireField.Label.REPEATED)
    public final List<String> ad_network_ids;

    /**
     * 如果为空，则不支持sk，填写当前支持的最大版本目前取值：1.0/2.0
     */
    @WireField(tag = 11, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    public final String support_sk_version;

    /**
     * 当前SDK版本所支持的扩展的功能1: overlay(仅iOS)；2:storekit(仅iOS)
     */
    @WireField(tag = 12, adapter = "com.squareup.wire.ProtoAdapter#UINT32", label = WireField.Label.REPEATED)
    public final List<Integer> sdk_ext_cap;

    /**
     * 媒体应用安装时间，单位为秒
     */
    @WireField(tag = 15, adapter = "com.squareup.wire.ProtoAdapter#INT64")
    public final Long install_time;

    /**
     * 必填！mraid1.x协议版本号
     */
    @WireField(tag = 17, adapter = "com.sigmob.sdk.common.models.Version#ADAPTER")
    public final Version mraid1_version;

    /**
     * 必填！mraid2.x协议版本号
     */
    @WireField(tag = 18, adapter = "com.sigmob.sdk.common.models.Version#ADAPTER")
    public final Version mraid2_version;

    public App(String app_id, Version app_version, String app_package, Integer orientation, String name, String idfv, String channel_id, String product_id, Boolean support_http, List<String> ad_network_ids, String support_sk_version, List<Integer> sdk_ext_cap, Long install_time, Version mraid1_version, Version mraid2_version) {
        this(app_id, app_version, app_package, orientation, name, idfv, channel_id, product_id, support_http, ad_network_ids, support_sk_version, sdk_ext_cap, install_time, mraid1_version, mraid2_version, ByteString.EMPTY);
    }

    public App(String app_id, Version app_version, String app_package, Integer orientation, String name, String idfv, String channel_id, String product_id, Boolean support_http, List<String> ad_network_ids, String support_sk_version, List<Integer> sdk_ext_cap, Long install_time, Version mraid1_version, Version mraid2_version, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.app_id = app_id;
        this.app_version = app_version;
        this.app_package = app_package;
        this.orientation = orientation;
        this.name = name;
        this.idfv = idfv;
        this.channel_id = channel_id;
        this.product_id = product_id;
        this.support_http = support_http;
        this.ad_network_ids = Internal.immutableCopyOf("ad_network_ids", ad_network_ids);
        this.support_sk_version = support_sk_version;
        this.sdk_ext_cap = Internal.immutableCopyOf("sdk_ext_cap", sdk_ext_cap);
        this.install_time = install_time;
        this.mraid1_version = mraid1_version;
        this.mraid2_version = mraid2_version;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.app_id = app_id;
        builder.app_version = app_version;
        builder.app_package = app_package;
        builder.orientation = orientation;
        builder.name = name;
        builder.idfv = idfv;
        builder.channel_id = channel_id;
        builder.product_id = product_id;
        builder.support_http = support_http;
        builder.ad_network_ids = Internal.copyOf("ad_network_ids", ad_network_ids);
        builder.support_sk_version = support_sk_version;
        builder.sdk_ext_cap = Internal.copyOf("sdk_ext_cap", sdk_ext_cap);
        builder.install_time = install_time;
        builder.mraid1_version = mraid1_version;
        builder.mraid2_version = mraid2_version;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof App)) return false;
        App o = (App) other;
        return unknownFields().equals(o.unknownFields()) && Internal.equals(app_id, o.app_id) && Internal.equals(app_version, o.app_version) && Internal.equals(app_package, o.app_package) && Internal.equals(orientation, o.orientation) && Internal.equals(name, o.name) && Internal.equals(idfv, o.idfv) && Internal.equals(channel_id, o.channel_id) && Internal.equals(product_id, o.product_id) && Internal.equals(support_http, o.support_http) && ad_network_ids.equals(o.ad_network_ids) && Internal.equals(support_sk_version, o.support_sk_version) && sdk_ext_cap.equals(o.sdk_ext_cap) && Internal.equals(install_time, o.install_time) && Internal.equals(mraid1_version, o.mraid1_version) && Internal.equals(mraid2_version, o.mraid2_version);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + (app_id != null ? app_id.hashCode() : 0);
            result = result * 37 + (app_version != null ? app_version.hashCode() : 0);
            result = result * 37 + (app_package != null ? app_package.hashCode() : 0);
            result = result * 37 + (orientation != null ? orientation.hashCode() : 0);
            result = result * 37 + (name != null ? name.hashCode() : 0);
            result = result * 37 + (idfv != null ? idfv.hashCode() : 0);
            result = result * 37 + (channel_id != null ? channel_id.hashCode() : 0);
            result = result * 37 + (product_id != null ? product_id.hashCode() : 0);
            result = result * 37 + (support_http != null ? support_http.hashCode() : 0);
            result = result * 37 + ad_network_ids.hashCode();
            result = result * 37 + (support_sk_version != null ? support_sk_version.hashCode() : 0);
            result = result * 37 + sdk_ext_cap.hashCode();
            result = result * 37 + (install_time != null ? install_time.hashCode() : 0);
            result = result * 37 + (mraid1_version != null ? mraid1_version.hashCode() : 0);
            result = result * 37 + (mraid2_version != null ? mraid2_version.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        if (app_id != null) builder.append(", app_id=").append(app_id);
        if (app_version != null) builder.append(", app_version=").append(app_version);
        if (app_package != null) builder.append(", app_package=").append(app_package);
        if (orientation != null) builder.append(", orientation=").append(orientation);
        if (name != null) builder.append(", name=").append(name);
        if (idfv != null) builder.append(", idfv=").append(idfv);
        if (channel_id != null) builder.append(", channel_id=").append(channel_id);
        if (product_id != null) builder.append(", product_id=").append(product_id);
        if (support_http != null) builder.append(", support_http=").append(support_http);
        if (!ad_network_ids.isEmpty()) builder.append(", ad_network_ids=").append(ad_network_ids);
        if (support_sk_version != null)
            builder.append(", support_sk_version=").append(support_sk_version);
        if (!sdk_ext_cap.isEmpty()) builder.append(", sdk_ext_cap=").append(sdk_ext_cap);
        if (install_time != null) builder.append(", install_time=").append(install_time);
        if (mraid1_version != null) builder.append(", mraid1_version=").append(mraid1_version);
        if (mraid2_version != null) builder.append(", mraid2_version=").append(mraid2_version);
        return builder.replace(0, 2, "App{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<App, Builder> {
        public String app_id;

        public Version app_version;

        public String app_package;

        public Integer orientation;

        public String name;

        public String idfv;

        public String channel_id;

        public String product_id;

        public Boolean support_http;

        public List<String> ad_network_ids;

        public String support_sk_version;

        public List<Integer> sdk_ext_cap;

        public Long install_time;

        public Version mraid1_version;

        public Version mraid2_version;

        public Builder() {
            ad_network_ids = Internal.newMutableList();
            sdk_ext_cap = Internal.newMutableList();
        }

        /**
         * 应用ID
         */
        public Builder app_id(String app_id) {
            this.app_id = app_id;
            return this;
        }

        /**
         * 必填！应用版本
         */
        public Builder app_version(Version app_version) {
            this.app_version = app_version;
            return this;
        }

        /**
         * 必填！应用包名。IOS设备为bundle id
         */
        public Builder app_package(String app_package) {
            this.app_package = app_package;
            return this;
        }

        /**
         * app方向：0: MaskAll、1:portrait、2:landspace
         */
        public Builder orientation(Integer orientation) {
            this.orientation = orientation;
            return this;
        }

        /**
         * app名称
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Vindor标示符，适用于对内：例如分析用户在应用内的行为等。
         */
        public Builder idfv(String idfv) {
            this.idfv = idfv;
            return this;
        }

        /**
         * 应用商店的渠道标识。字典同yomob的渠道字典，当前也只有yomob需要
         */
        public Builder channel_id(String channel_id) {
            this.channel_id = channel_id;
            return this;
        }

        /**
         * 媒体在投放系统中的apple id（iOS） 或 package name（Android）
         */
        public Builder product_id(String product_id) {
            this.product_id = product_id;
            return this;
        }

        /**
         * app是否支持http
         */
        public Builder support_http(Boolean support_http) {
            this.support_http = support_http;
            return this;
        }

        /**
         * 媒体在info.plist中配置的SKAdNetworkId列表
         */
        public Builder ad_network_ids(List<String> ad_network_ids) {
            Internal.checkElementsNotNull(ad_network_ids);
            this.ad_network_ids = ad_network_ids;
            return this;
        }

        /**
         * 如果为空，则不支持sk，填写当前支持的最大版本目前取值：1.0/2.0
         */
        public Builder support_sk_version(String support_sk_version) {
            this.support_sk_version = support_sk_version;
            return this;
        }

        /**
         * 当前SDK版本所支持的扩展的功能1: overlay(仅iOS)；2:storekit(仅iOS)
         */
        public Builder sdk_ext_cap(List<Integer> sdk_ext_cap) {
            Internal.checkElementsNotNull(sdk_ext_cap);
            this.sdk_ext_cap = sdk_ext_cap;
            return this;
        }

        /**
         * 媒体应用安装时间，单位为秒
         */
        public Builder install_time(Long install_time) {
            this.install_time = install_time;
            return this;
        }

        /**
         * 必填！mraid1.x协议版本号
         */
        public Builder mraid1_version(Version mraid1_version) {
            this.mraid1_version = mraid1_version;
            return this;
        }

        /**
         * 必填！mraid2.x协议版本号
         */
        public Builder mraid2_version(Version mraid2_version) {
            this.mraid2_version = mraid2_version;
            return this;
        }

        @Override
        public App build() {
            return new App(app_id, app_version, app_package, orientation, name, idfv, channel_id, product_id, support_http, ad_network_ids, support_sk_version, sdk_ext_cap, install_time, mraid1_version, mraid2_version, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_App extends ProtoAdapter<App> {
        public ProtoAdapter_App() {
            super(FieldEncoding.LENGTH_DELIMITED, App.class);
        }

        @Override
        public int encodedSize(App value) {
            return ProtoAdapter.STRING.encodedSizeWithTag(1, value.app_id) + Version.ADAPTER.encodedSizeWithTag(2, value.app_version) + ProtoAdapter.STRING.encodedSizeWithTag(3, value.app_package) + ProtoAdapter.UINT32.encodedSizeWithTag(4, value.orientation) + ProtoAdapter.STRING.encodedSizeWithTag(5, value.name) + ProtoAdapter.STRING.encodedSizeWithTag(6, value.idfv) + ProtoAdapter.STRING.encodedSizeWithTag(7, value.channel_id) + ProtoAdapter.STRING.encodedSizeWithTag(8, value.product_id) + ProtoAdapter.BOOL.encodedSizeWithTag(9, value.support_http) + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(10, value.ad_network_ids) + ProtoAdapter.STRING.encodedSizeWithTag(11, value.support_sk_version) + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(12, value.sdk_ext_cap) + ProtoAdapter.INT64.encodedSizeWithTag(15, value.install_time) + Version.ADAPTER.encodedSizeWithTag(17, value.mraid1_version) + Version.ADAPTER.encodedSizeWithTag(18, value.mraid2_version) + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, App value) throws IOException {
            ProtoAdapter.STRING.encodeWithTag(writer, 1, value.app_id);
            Version.ADAPTER.encodeWithTag(writer, 2, value.app_version);
            ProtoAdapter.STRING.encodeWithTag(writer, 3, value.app_package);
            ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.orientation);
            ProtoAdapter.STRING.encodeWithTag(writer, 5, value.name);
            ProtoAdapter.STRING.encodeWithTag(writer, 6, value.idfv);
            ProtoAdapter.STRING.encodeWithTag(writer, 7, value.channel_id);
            ProtoAdapter.STRING.encodeWithTag(writer, 8, value.product_id);
            ProtoAdapter.BOOL.encodeWithTag(writer, 9, value.support_http);
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 10, value.ad_network_ids);
            ProtoAdapter.STRING.encodeWithTag(writer, 11, value.support_sk_version);
            ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 12, value.sdk_ext_cap);
            ProtoAdapter.INT64.encodeWithTag(writer, 15, value.install_time);
            Version.ADAPTER.encodeWithTag(writer, 17, value.mraid1_version);
            Version.ADAPTER.encodeWithTag(writer, 18, value.mraid2_version);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public App decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.app_id(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 2:
                        builder.app_version(Version.ADAPTER.decode(reader));
                        break;
                    case 3:
                        builder.app_package(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 4:
                        builder.orientation(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 5:
                        builder.name(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 6:
                        builder.idfv(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 7:
                        builder.channel_id(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 8:
                        builder.product_id(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 9:
                        builder.support_http(ProtoAdapter.BOOL.decode(reader));
                        break;
                    case 10:
                        builder.ad_network_ids.add(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 11:
                        builder.support_sk_version(ProtoAdapter.STRING.decode(reader));
                        break;
                    case 12:
                        builder.sdk_ext_cap.add(ProtoAdapter.UINT32.decode(reader));
                        break;
                    case 15:
                        builder.install_time(ProtoAdapter.INT64.decode(reader));
                        break;
                    case 17:
                        builder.mraid1_version(Version.ADAPTER.decode(reader));
                        break;
                    case 18:
                        builder.mraid2_version(Version.ADAPTER.decode(reader));
                        break;
                    default: {
                        FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                        Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                        builder.addUnknownField(tag, fieldEncoding, value);
                    }
                }
            }
            reader.endMessage(token);
            return builder.build();
        }

        @Override
        public App redact(App value) {
            Builder builder = value.newBuilder();
            if (builder.app_version != null)
                builder.app_version = Version.ADAPTER.redact(builder.app_version);
            if (builder.mraid1_version != null)
                builder.mraid1_version = Version.ADAPTER.redact(builder.mraid1_version);
            if (builder.mraid2_version != null)
                builder.mraid2_version = Version.ADAPTER.redact(builder.mraid2_version);
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
